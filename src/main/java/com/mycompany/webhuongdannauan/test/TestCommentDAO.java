package com.mycompany.webhuongdannauan.test;

import com.mycompany.webhuongdannauan.dao.impl.CommentDAOImpl;
import com.mycompany.webhuongdannauan.dao.impl.UserDAOImpl;
import com.mycompany.webhuongdannauan.dao.impl.RecipeDAOImpl;
import com.mycompany.webhuongdannauan.model.Comment;
import com.mycompany.webhuongdannauan.model.User;
import com.mycompany.webhuongdannauan.model.Recipe;
import jakarta.servlet.annotation.WebListener;

import java.util.List;

public class TestCommentDAO {

    public static void main(String[] args) {
        // Kh·ªüi t·∫°o c√°c DAO c·∫ßn thi·∫øt
        CommentDAOImpl commentDAO = new CommentDAOImpl();
        UserDAOImpl userDAO = new UserDAOImpl();
        RecipeDAOImpl recipeDAO = new RecipeDAOImpl();

        // ----------------------------------------------------
        // GI·∫¢ ƒê·ªäNH D·ªÆ LI·ªÜU: C·∫ßn ph·∫£i t·∫£i ƒë·ªëi t∆∞·ª£ng User v√† Recipe
        // ----------------------------------------------------
        Long existingUserId = 1L; // Thay b·∫±ng ID User c√≥ s·∫µn trong DB c·ªßa b·∫°n
        Long existingRecipeId = 5L; // Thay b·∫±ng ID Recipe c√≥ s·∫µn trong DB c·ªßa b·∫°n

        // T·∫£i c√°c ƒë·ªëi t∆∞·ª£ng tham chi·∫øu (S·ª≠ d·ª•ng findById t·ª´ DAO)
        User commentAuthor = userDAO.findById(existingUserId);
        Recipe targetRecipe = recipeDAO.findById(existingRecipeId);

        if (commentAuthor == null || targetRecipe == null) {
            System.err.println("L·ªói: Kh√¥ng t√¨m th·∫•y User ho·∫∑c Recipe v·ªõi ID ƒë√£ cho. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu.");
            return;
        }

        System.out.println("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ CommentDAO...");

        // üü¢ 1. T·∫°o m·ªõi m·ªôt Comment
        Comment newComment = new Comment();
        newComment.setContent("M√≥n n√†y ngon qu√°! S·∫Ω th·ª≠ v√†o cu·ªëi tu·∫ßn.");
        
        // S·ª¨A L·ªñI: Thi·∫øt l·∫≠p ƒë·ªëi t∆∞·ª£ng User v√† Recipe thay v√¨ ID
        newComment.setUser(commentAuthor); 
        newComment.setRecipe(targetRecipe); 
        
        commentDAO.save(newComment); 
        System.out.println("ƒê√£ l∆∞u Comment m·ªõi v·ªõi ID: " + newComment.getId());

        // ----------------------------------------------------
        
        // üü° 2. T√¨m theo ID
        Long savedCommentId = newComment.getId();
        Comment found = commentDAO.findById(savedCommentId);
        
        if (found != null) {
             // ƒê·ªÉ truy c·∫≠p User/Recipe, Hibernate c√≥ th·ªÉ c·∫ßn Entity Manager v·∫´n m·ªü.
             // D√π v·∫≠y, findById th∆∞·ªùng tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c detach.
             // N·∫øu l·ªói LazyInitializationException x·∫£y ra, b·∫°n c·∫ßn fetch s·ªõm h∆°n ho·∫∑c x·ª≠ l√Ω trong c√πng transaction.
             System.out.println("T√¨m ƒë∆∞·ª£c comment: " + found.getContent());
             System.out.println("  - T√°c gi·∫£: " + found.getUser().getUsername()); 
             System.out.println("  - M√≥n ƒÉn: " + found.getRecipe().getTitle());
        } else {
             System.out.println("L·ªói: Kh√¥ng t√¨m th·∫•y comment v·ª´a t·∫°o.");
        }


        // üîµ 3. L·∫•y t·∫•t c·∫£ comment
        System.out.println("\n--- DANH S√ÅCH T·∫§T C·∫¢ COMMENT ---");
        List<Comment> allComments = commentDAO.findAll();
        allComments.forEach(cm -> {
            // C·∫©n th·∫≠n v·ªõi LazyInitializationException n·∫øu truy c·∫≠p User/Recipe ·ªü ƒë√¢y
            System.out.println("Comment ID " + cm.getId() + ": " + cm.getContent());
        });
        System.out.println("T·ªïng s·ªë comments: " + allComments.size());

        // üî¥ 4. X√≥a comment
        if (found != null) {
            commentDAO.delete(found);
            System.out.println("\nƒê√£ x√≥a comment c√≥ ID: " + savedCommentId);
        }
        
        // Ki·ªÉm tra l·∫°i sau khi x√≥a
        Comment deletedCheck = commentDAO.findById(savedCommentId);
        if (deletedCheck == null) {
             System.out.println("X√≥a th√†nh c√¥ng!");
        }
    }
}